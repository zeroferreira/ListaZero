rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isValidUser() {
      return request.auth != null && request.auth.uid != null;
    }

    function isValidData() {
      return request.resource.data.keys().hasAll(['timestamp']) &&
             request.resource.data.timestamp is timestamp;
    }

    function isRecentData() {
      return request.time < request.resource.data.timestamp + duration.value(1, 'h');
    }

    function isValidPlayedSongsData() {
      return request.resource.data.keys().hasAll(['day', 'songs', 'lastUpdated']) &&
             request.resource.data.day is string &&
             request.resource.data.songs is list &&
             request.resource.data.lastUpdated is timestamp;
    }

    function isValidDayFormat(day) {
      return day.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
    }

    // Solicitudes de canciones
    match /solicitudes/{doc} {
      allow read: if true;
      allow create: if true;
      allow delete: if isSignedIn();
      allow update: if false;
    }

    // Usuarios VIP (para el filtro y panel admin)
    match /vipUsers/{doc} {
      allow read: if true;
      allow create, update, delete: if isSignedIn();
    }

    // Usuarios Z0-VIP (para el filtro y panel admin)
    match /z0VipUsers/{doc} {
      allow read: if true;
      allow create, update, delete: if isSignedIn();
    }

    // Usuarios Donadores temporales (para el filtro y panel admin)
    match /donadorUsers/{doc} {
      allow read: if true;
      allow create, update, delete: if isSignedIn();
    }

    // Usuarios registrados (para poblar select en Admin)
    match /users/{doc} {
      allow read: if true;
      allow create, update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    // Estadísticas de usuarios (para gamificación y stats)
    match /userStats/{userId} {
      allow read: if isOwner(userId);
      allow create, update: if isOwner(userId);
      allow delete: if isSignedIn();
    }

    // Logros de usuarios (para sistema de gamificación)
    match /userAchievements/{userId} {
      allow read: if isOwner(userId);
      allow create, update: if isOwner(userId);
      allow delete: if isSignedIn();
    }

    // Configuraciones de usuario (temas, preferencias)
    match /userSettings/{userId} {
      allow read: if isOwner(userId);
      allow create, update: if isOwner(userId);
      allow delete: if isSignedIn();
    }

    // Recompensas disponibles (catálogo de recompensas)
    match /rewards/{doc} {
      allow read: if true;
      allow create, update, delete: if isSignedIn();
    }

    // Solicitudes de recompensas de usuarios
    match /rewardRequests/{doc} {
      allow read: if isSignedIn() || (isValidUser() && resource.data.userId == request.auth.uid);
      allow create: if isValidUser() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn();
    }

    // Historial de recompensas canjeadas
    match /redeemedRewards/{doc} {
      allow read: if isSignedIn() || (isValidUser() && resource.data.userId == request.auth.uid);
      allow create: if isValidUser() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn();
    }

    // Configuración global del sistema
    match /systemConfig/{doc} {
      allow read: if true;
      allow create, update, delete: if isSignedIn();
    }

    // Logs de actividad del sistema (opcional, para debugging)
    match /activityLogs/{doc} {
      allow read: if isSignedIn();
      allow create: if true;
      allow update, delete: if isSignedIn();
    }

    // Datos de sesión temporal (para sincronización en tiempo real)
    match /sessionData/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Datos de canciones reproducidas por día (funcionalidad global)
    match /playedSongs/{day} {
      allow read: if true;
      allow create: if isValidDayFormat(day) &&
                       isValidPlayedSongsData() &&
                       request.resource.data.day == day;
      allow update: if isValidDayFormat(day) &&
                       resource.data.day == day &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['songs', 'lastUpdated']);
      allow delete: if isSignedIn();
    }

    // Métricas y analytics del sistema
    match /analytics/{doc} {
      allow read: if isSignedIn();
      allow create: if true;
      allow update, delete: if isSignedIn();
    }

    // Notificaciones globales del sistema (opcional para futuras funcionalidades)
    match /globalNotifications/{doc} {
      allow read: if true;
      allow create, update, delete: if isSignedIn();
    }

    // Eventos del sistema en tiempo real (para sincronización avanzada)
    match /systemEvents/{doc} {
      allow read: if true;
      allow create: if isValidData() && isRecentData();
      allow update, delete: if isSignedIn();
    }

    // Backup de datos del sistema
    match /backups/{doc} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    // Historial de canciones reproducidas (para análisis y estadísticas)
    match /playedSongsHistory/{doc} {
      allow read: if isSignedIn();
      allow create: if isValidData();
      allow update, delete: if isSignedIn();
    }
  }
}